transport {
  type = "TCP"
  server = "NIO"
  # client和server通信心跳检测开关
  heartbeat = true
  thread-factory {
    boss-thread-prefix = "NettyBoss"
    worker-thread-prefix = "NettyServerNIOWorker"
    server-executor-thread-prefix = "NettyServerBizHandler"
    share-boss-worker = false
    client-selector-thread-prefix = "NettyClientSelector"
    client-selector-thread-size = 1
    client-worker-thread-prefix = "NettyClientWorkerThread"
    boss-thread-size = 1
    worker-thread-size = 8
  }
  shutdown {
    wait = 3
  }
  # client和server通信编解码方式
  serialization = "seata"
  # client和server通信数据压缩方式
  compressor = "none"
}

client {
  # 异步提交缓存队列长度
  async.commit.buffer.limit = 10000
  lock {
  # 校验或占用全局锁重试间隔
    retry.internal = 10
  # 校验或占用全局锁重试次数
    retry.times = 30
  }
  # 一阶段结果上报TC重试次数
  report.retry.count = 5
  # 一阶段全局提交结果上报TC重试次数
  tm.commit.retry.count = 1
  # 一阶段全局回滚结果上报TC重试次数
  tm.rollback.retry.count = 1
}


service {
  #transaction service group mapping
  vgroup_mapping.etmpro = "default"
  #only support when registry.type=file, please don't set multiple addresses
  default.grouplist = "127.0.0.1:8091"
  #disable seata
  disableGlobalTransaction = false
}

## transaction log store, only used in seata-server
store {
  ## store mode: file、db
  mode = "db"

  ## database store property
  db {
    ## the implement of javax.sql.DataSource, such as DruidDataSource(druid)/BasicDataSource(dbcp) etc.
    datasource = "dbcp"
    ## mysql/oracle/h2/oceanbase etc.
    db-type = "mysql"
    driver-class-name = "com.mysql.jdbc.Driver"
    url = "jdbc:mysql://192.168.7.52:3306/seata?allowMultiQueries=true&failOverReadOnly=false&useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&serverTimezone=GMT%2B8"
    user = "root"
    password = "etmcn.com"
	# db模式数据库初始连接数
    min-conn = 1
    # db模式数据库最大连接数
    max-conn = 3
    # db模式全局事务表名
    global.table = "global_table"
    # db模式分支事务表名
    branch.table = "branch_table"
    # db模式全局锁表名
    lock-table = "lock_table"
    # db模式查询全局事务一次的最大条数
    query-limit = 100
  }
}
  
## 暂未使用
lock {
  mode = "remote"

  local {

  }

  remote {
  }
}

## 单位:毫秒
recovery {
  # 二阶段提交未完成状态全局事务重试提交线程间隔时间
  committing-retry-period = 1000
  # 二阶段异步提交状态重试提交线程间隔时间
  asyn-committing-retry-period = 1000
  # 二阶段回滚状态重试回滚线程间隔时间
  rollbacking-retry-period = 1000
  # 超时状态检测重试线程间隔时间
  timeout-retry-period = 1000
}

transaction {
  # undo 二阶段回滚镜像校验
  undo.data.validation = true
  # undo数据序列化方式
  undo.log.serialization = "jackson"
  # undo数据保存几天
  undo.log.save.days = 7
  # undo清理线程间隔时间
  undo.log.delete.period = 86400000
  # undo数据保存到哪个表
  undo.log.table = "undo_log"
}

support {
  spring {
    # 数据源自动代理开关
    datasource.autoproxy = false
  }  
}